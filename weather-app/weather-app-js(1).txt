// Formatta la data per le previsioni
function formatForecastDate(timestamp) {
    const days = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];
    const date = new Date(timestamp * 1000);
    return days[date.getDay()];
}

// Funzioni per salvare/caricare città
function toggleSaveCity(cityName) {
    const index = savedCities.indexOf(cityName);
    
    if (index === -1) {
        // Aggiungi la città se non è già salvata
        savedCities.push(cityName);
    } else {
        // Rimuovi la città se è già salvata
        savedCities.splice(index, 1);
    }
    
    // Aggiorna il localStorage e l'UI
    saveCitiesToLocalStorage();
    updateSavedCitiesList();
    
    // Aggiorna l'icona della stella
    const saveButton = document.querySelector('.save-city');
    if (savedCities.includes(cityName)) {
        saveButton.innerHTML = '<i class="fas fa-star saved"></i>';
    } else {
        saveButton.innerHTML = '<i class="far fa-star"></i>';
    }
}

function saveCitiesToLocalStorage() {
    localStorage.setItem('savedCities', JSON.stringify(savedCities));
}

function loadSavedCities() {
    const saved = localStorage.getItem('savedCities');
    savedCities = saved ? JSON.parse(saved) : [];
    updateSavedCitiesList();
}

function updateSavedCitiesList() {
    savedCitiesList.innerHTML = '';
    
    if (savedCities.length === 0) {
        savedCitiesList.innerHTML = '<li>Nessuna città salvata</li>';
        return;
    }
    
    savedCities.forEach(city => {
        const li = document.createElement('li');
        li.className = 'saved-city-item';
        li.innerHTML = `
            <span onclick="getWeatherData('${city}')">${city}</span>
            <span class="remove-city" onclick="removeCity('${city}', event)">×</span>
        `;
        savedCitiesList.appendChild(li);
    });
}

function removeCity(cityName, event) {
    event.stopPropagation();
    const index = savedCities.indexOf(cityName);
    if (index !== -1) {
        savedCities.splice(index, 1);
        saveCitiesToLocalStorage();
        updateSavedCitiesList();
    }
}

// Funzioni per mostrare/nascondere stati dell'UI
function showLoading() {
    loadingIndicator.style.display = 'block';
    weatherContainer.style.display = 'none';
    forecastContainer.style.display = 'none';
}

function hideLoading() {
    loadingIndicator.style.display = 'none';
}

function showError(message) {
    errorMessage.textContent = message;
    errorContainer.style.display = 'block';
}

function hideError() {
    errorContainer.style.display = 'none';
}// Costanti e configurazione
const API_KEY = 'YOUR_API_KEY'; // Sostituisci con la tua API key di OpenWeatherMap
const API_URL = 'https://api.openweathermap.org/data/2.5';
const WEATHER_ICONS_URL = 'https://openweathermap.org/img/wn/';

// Seleziona elementi DOM
const cityInput = document.getElementById('cityInput');
const searchBtn = document.getElementById('searchBtn');
const weatherContainer = document.getElementById('weatherContainer');
const forecastContainer = document.getElementById('forecastContainer');
const loadingIndicator = document.getElementById('loading');
const errorContainer = document.getElementById('error');
const errorMessage = document.getElementById('errorMessage');
const savedCitiesList = document.getElementById('savedCitiesList');

// Array per memorizzare le città salvate
let savedCities = [];

// All'avvio dell'applicazione
document.addEventListener('DOMContentLoaded', () => {
    // Carica le città salvate dal localStorage
    loadSavedCities();
    
    // Se ci sono città salvate, mostra la meteo per la prima città
    if (savedCities.length > 0) {
        getWeatherData(savedCities[0]);
    }
});

// Event listeners
searchBtn.addEventListener('click', handleSearch);
cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        handleSearch();
    }
});

// Funzioni principali
function handleSearch() {
    const city = cityInput.value.trim();
    if (city) {
        getWeatherData(city);
        cityInput.value = '';
    }
}

async function getWeatherData(city) {
    showLoading();
    hideError();
    
    try {
        // Ottieni i dati meteorologici attuali
        const weatherResponse = await fetch(`${API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=it`);
        
        if (!weatherResponse.ok) {
            throw new Error(`Città non trovata. Controlla il nome e riprova.`);
        }
        
        const weatherData = await weatherResponse.json();
        
        // Ottieni le previsioni per i prossimi giorni
        const forecastResponse = await fetch(`${API_URL}/forecast?q=${city}&appid=${API_KEY}&units=metric&lang=it`);
        const forecastData = await forecastResponse.json();
        
        // Visualizza i dati
        displayCurrentWeather(weatherData);
        displayForecast(forecastData);
        
        hideLoading();
    } catch (error) {
        hideLoading();
        showError(error.message);
    }
}

function displayCurrentWeather(data) {
    const isSaved = savedCities.includes(data.name);
    const saveIconClass = isSaved ? 'fas fa-star saved' : 'far fa-star';
    
    weatherContainer.innerHTML = `
        <div class="weather-header">
            <h2 class="city-name">${data.name}, ${data.sys.country}</h2>
            <button class="save-city" onclick="toggleSaveCity('${data.name}')">
                <i class="${saveIconClass}"></i>
            </button>
        </div>
        <div class="weather-info">
            <div class="weather-temp">${Math.round(data.main.temp)}°C</div>
            <div>
                <img class="weather-icon" src="${WEATHER_ICONS_URL}${data.weather[0].icon}@2x.png" alt="${data.weather[0].description}">
                <div class="weather-description">${data.weather[0].description}</div>
            </div>
        </div>
        <div class="weather-details">
            <div class="weather-detail">
                <i class="fas fa-thermometer-half"></i>
                <span>Percepita: ${Math.round(data.main.feels_like)}°C</span>
            </div>
            <div class="weather-detail">
                <i class="fas fa-tint"></i>
                <span>Umidità: ${data.main.humidity}%</span>
            </div>
            <div class="weather-detail">
                <i class="fas fa-wind"></i>
                <span>Vento: ${Math.round(data.wind.speed * 3.6)} km/h</span>
            </div>
            <div class="weather-detail">
                <i class="fas fa-compress-arrows-alt"></i>
                <span>Pressione: ${data.main.pressure} hPa</span>
            </div>
        </div>
    `;
    
    weatherContainer.style.display = 'block';
}

function displayForecast(data) {
    // Raggruppa le previsioni per giorno (escludendo il giorno corrente)
    const dailyForecasts = groupForecastsByDay(data.list);
    
    // Crea il contenuto HTML per le previsioni
    let forecastHTML = `
        <h2 class="forecast-title">Previsioni per i prossimi giorni</h2>
        <div class="forecast-cards">
    `;
    
    // Aggiungi una card per ogni giorno (massimo 5 giorni)
    dailyForecasts.slice(1, 6).forEach(day => {
        forecastHTML += `
            <div class="forecast-card">
                <div class="forecast-day">${formatForecastDate(day.dt)}</div>
                <img class="forecast-icon" src="${WEATHER_ICONS_URL}${day.weather[0].icon}@2x.png" alt="${day.weather[0].description}">
                <div class="forecast-description">${day.weather[0].description}</div>
                <div class="forecast-temp">
                    <span class="forecast-max">${Math.round(day.temp.max)}°</span>
                    <span class="forecast-min">${Math.round(day.temp.min)}°</span>
                </div>
            </div>
        `;
    });
    
    forecastHTML += `</div>`;
    forecastContainer.innerHTML = forecastHTML;
    forecastContainer.style.display = 'block';
}

// Funzione per raggruppare le previsioni per giorno
function groupForecastsByDay(forecastList) {
    const dailyData = {};
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    forecastList.forEach(item => {
        const date = new Date(item.dt * 1000);
        date.setHours(0, 0, 0, 0);
        const day = date.getTime();
        
        if (!dailyData[day]) {
            dailyData[day] = {
                dt: item.dt,
                temp: {
                    min: item.main.temp,
                    max: item.main.temp
                },
                weather: item.weather
            };
        } else {
            // Aggiorna min/max
            if (item.main.temp < dailyData[day].temp.min) {
                dailyData[day].temp.min = item.main.temp;
            }
            if (item.main.temp > dailyData[day].temp.max) {
                dailyData[day].temp.max = item.main.temp;
            }
            
            // Se è mezzogiorno, usa questa previsione come rappresentativa del giorno
            if (date.getHours() === 12) {
                dailyData[day].weather = item.weather;
            }
        }
    });
    
    // Converti l'oggetto in array e ordina per data
    return Object.values(dailyData).sort((a, b) => a.dt - b.dt);
}